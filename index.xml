<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>log</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 20 Oct 2015 01:42:00 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>pythonで編集中のライブラリを読み込む</title>
      <link>http://localhost:1313/post/editable/</link>
      <pubDate>Tue, 20 Oct 2015 01:42:00 +0900</pubDate>
      
      <guid>http://localhost:1313/post/editable/</guid>
      <description>&lt;p&gt;研究のために自分でライブラリを書くのは面倒くさいので、ある程度まで書かれてるライブラリの中身をいじるってことをよくやる。
そうすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install .
pip uninstall &amp;quot;ライブラリ名&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいなことを何度もやるはめになる。とても面倒くさい。&lt;/p&gt;

&lt;p&gt;そんななかで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --editable .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形でinstallすると、ライブラリを編集中の状態でもそのまま使える。面倒くさいことしなくていいので幸せ。
細かいことは&lt;a href=&#34;http://pip.readthedocs.org/en/stable/reference/pip_install/#editable-installs&#34;&gt;公式のdocument&lt;/a&gt;に書いてあるので読むといい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pyenvを使っての環境構築</title>
      <link>http://localhost:1313/post/pyenv-manual/</link>
      <pubDate>Mon, 27 Jul 2015 01:19:31 +0900</pubDate>
      
      <guid>http://localhost:1313/post/pyenv-manual/</guid>
      <description>

&lt;p&gt;探せばpyenvの使い方的なものは色々溢れてるけど、色々分散していたので個人的なまとめを作る。流れとしては以下の様な感じ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手順

&lt;ol&gt;
&lt;li&gt;pyenvとpluginをinstall&lt;/li&gt;
&lt;li&gt;pyenvを使ってpythonをinstall&lt;/li&gt;
&lt;li&gt;virtualenvを使って環境を構築&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pyenvとpluginをinstall:36b4326871019bb570f43b2854147428&#34;&gt;pyenvとpluginをinstall&lt;/h2&gt;

&lt;p&gt;今回、想定している状況が「apt-getを使う権限がないユーザが異なるpythonをinstallしたい」という感じ。なのでgithubからcloneしてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に今回使うpluginをinstall。使いたいのはpyenv-pip-refleshとpyenv-virtualenvの２つ。&lt;/p&gt;

&lt;p&gt;pyenv-pip-refleshはpyenvでpythonのversionを切り替えた時に、pyenv rehashというコマンドを使う必要があるのだけど、それをしないで済むplugin。pyenv-virtualenvはpythonの仮想環境を作るpluginになっている。&lt;/p&gt;

&lt;p&gt;それぞれ~/.pyenv/pluginsの中にcloneすればinstallが終わり&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.pyenv/plugins
git clone https://github.com/yyuu/pyenv-pip-rehash.git
git clone git://github.com/yyuu/pyenv-virtualenv.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次は~/.bashrcにpyenvのpathを書く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;
if [ -d &amp;quot;$PYENV_ROOT&amp;quot; ]; then
    export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;
    eval &amp;quot;$(pyenv init -)&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでいいなんて、すばらしい。&lt;/p&gt;

&lt;h2 id=&#34;pyenvを使ってpythonをinstall:36b4326871019bb570f43b2854147428&#34;&gt;pyenvを使ってpythonをinstall&lt;/h2&gt;

&lt;p&gt;pyenvで自分の欲しいpythonのversionをinstallする。pyenvでinstallできるversionは以下で確認可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv install -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回欲しいversionは2.7系なので、それの中からてきとうなやつをinstallする。下のコマンドを入力して少しすると2.7.10がinstallできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv install 2.7.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;virtualenvを使って環境を構築:36b4326871019bb570f43b2854147428&#34;&gt;virtualenvを使って環境を構築&lt;/h2&gt;

&lt;p&gt;使う環境を分けたいので、virtualenvを使って、別で新しく環境を作る。以下のコマンドで仮想環境を作成できる。virtualenv-nameには自分で適当な名前を入れるといい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv virtualenv 2.7.10 virtualenv-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した環境を使う場合には以下のコマンド。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv activate virtualenv-name // 環境を使う時
pyenv deactivate // 環境から抜けたいとき
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;activateすると以下のように言われるので、言われるままに追加すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Load pyenv-virtualenv automatically by adding
# the following to ~/.bash_profile:

eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自分の場合だと、~/.bashrcに追加したので以下のような感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した環境ごとにpipを使えるので、あとは欲しいライブラリなどを適当にinstallすれば終わり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hugoを使ってみる</title>
      <link>http://localhost:1313/post/hugo/</link>
      <pubDate>Sun, 26 Jul 2015 21:00:33 +0900</pubDate>
      
      <guid>http://localhost:1313/post/hugo/</guid>
      <description>

&lt;p&gt;自分のログをはてなブログやらevernoteで取ってたけど、気変わりしてhugoを使ってみる。案外詰まったので、作業手順を載せる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手順

&lt;ol&gt;
&lt;li&gt;hugoをinstall&lt;/li&gt;
&lt;li&gt;themeを選ぶ&lt;/li&gt;
&lt;li&gt;postするページを作る&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hugoをinstall:32ab7241d48fcc174c877413a917f8cf&#34;&gt;hugoをinstall&lt;/h2&gt;

&lt;p&gt;hugoをインストールするだけならhomebrewを使うだけで十分。以下のコマンドを入力。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugoで管理するディレクトリは以下のコマンドで生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site &amp;quot;directory-name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時に生成されるディレクトリ内のpublicディレクトリを公開すればページを表示することができる。&lt;/p&gt;

&lt;h2 id=&#34;themeを選ぶ:32ab7241d48fcc174c877413a917f8cf&#34;&gt;themeを選ぶ&lt;/h2&gt;

&lt;p&gt;hugoを使う上でのthemeを選択。githubにHugoThemesと公開されているので、そこから選択して使うといい。私は選ぶのが面倒くさかったのでとりあえず全部落として見て試してみる方針。以下のコマンドでは、hugoThemesにあるものをhugoで管理するディレクトリ内にthemesという名前で落としてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはここから落としてきたテーマから自分のお好みのものを選択するだけ&lt;/p&gt;

&lt;h2 id=&#34;postするページを作る:32ab7241d48fcc174c877413a917f8cf&#34;&gt;postするページを作る&lt;/h2&gt;

&lt;p&gt;とっても簡単。ページのテンプレートを作るには以下のコマンドを使用する。以下で生成されたmarkdownのファイルに対して、記事を書いていくという流れになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/&amp;quot;name&amp;quot;.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ページの生成は以下でできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t theme-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカルでpreviewしたい場合は以下のコマンド。入力後にlocalhost:1313を開けばどうなっているかを見れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -t theme-name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;push:32ab7241d48fcc174c877413a917f8cf&#34;&gt;push&lt;/h2&gt;

&lt;p&gt;hugoで作ったページはpublicディレクトリの中にあるので、それを丸ごと公開する場においてあげれば終わり。私の場合だとpublicディレクトリをgithubに作ったgithub pagesのリポジトリに突っ込めば見れる。&lt;/p&gt;

&lt;p&gt;他に細かい設定はあるけど、一応はこれで公開までは持っていける。残りやるとすれば&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default.mdを作る&lt;/li&gt;
&lt;li&gt;config.tomlのbaseurlを公開するurlに変更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ぐらい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golangでmap同士を比較する</title>
      <link>http://localhost:1313/post/deepequal/</link>
      <pubDate>Sun, 26 Jul 2015 03:56:32 +0900</pubDate>
      
      <guid>http://localhost:1313/post/deepequal/</guid>
      <description>&lt;p&gt;golangでmapを比較するときにどうしたらいいかと思って調べてみると思いの外簡単だった&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
import &amp;quot;reflect&amp;quot;

x := map[string]bool{&amp;quot;a&amp;quot; : true, &amp;quot;b&amp;quot; : true}
y := map[string]bool{&amp;quot;a&amp;quot; : true, &amp;quot;c&amp;quot; : true}
z := map[string]bool{&amp;quot;a&amp;quot; : true, &amp;quot;b&amp;quot; : true}

reflect.DeepEqual(x, y) // false
reflect.DeepEqual(x, z) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reflectって便利&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golangでmapに要素があるかを調べる</title>
      <link>http://localhost:1313/post/exist/</link>
      <pubDate>Fri, 24 Jul 2015 04:23:33 +0900</pubDate>
      
      <guid>http://localhost:1313/post/exist/</guid>
      <description>&lt;p&gt;使う割によく忘れるのでメモ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;dict := map[string]int{&amp;quot;a&amp;quot;: 0}

if _, ok := dict[&amp;quot;a&amp;quot;]; !ok {
    // 要素が無いとき
} else {
    // 要素があるとき
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>