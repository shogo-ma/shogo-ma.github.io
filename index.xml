<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>log</title>
    <link>http://shogo-ma.github.io/index.xml</link>
    <description>Recent content on log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by shogo-ma</copyright>
    <lastBuildDate>Sat, 10 Dec 2016 22:41:40 +0900</lastBuildDate>
    <atom:link href="http://shogo-ma.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>両立がなかなか難しい</title>
      <link>http://shogo-ma.github.io/post/201611/</link>
      <pubDate>Sat, 10 Dec 2016 22:41:40 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/201611/</guid>
      <description>

&lt;h2 id=&#34;11月&#34;&gt;11月&lt;/h2&gt;

&lt;p&gt;オークションで作業机とイスを手に入れ，majestouch2を購入したことで，自宅にかなり満足が行く作業環境ができたのでこれで進捗が作り出せるはず．仕事の方はまったくうまく行かずストレスしかなく健康に影響が出始めているのでなんとかしたい．&lt;/p&gt;

&lt;h2 id=&#34;体調&#34;&gt;体調&lt;/h2&gt;

&lt;p&gt;胃酸過多で逆流性食道炎を発症．薬を飲んでも対して変化がなかったのでほっといてたら悪化したらしく，何か食べるだけで体調が悪くなるようになってしまった．&lt;/p&gt;

&lt;h2 id=&#34;進捗&#34;&gt;進捗&lt;/h2&gt;

&lt;p&gt;毎回「進捗ない」と書くのも芸がないので，とりあえず毎日少しでも良いので何かやることにした．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shogo-ma/connpass-go&#34;&gt;connpass-go&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;かなり雑なconnpassの検索コマンド．cobraとgoqueryを使ってみたかったので作った（まだ途中）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;クソアプリチャレンジ

&lt;ul&gt;
&lt;li&gt;Androidアプリを作りたいといいつつ，何もしていなかったのでやり始めた

&lt;ul&gt;
&lt;li&gt;やることは，一日に一つどういう内容でもいいので，Androidアプリに関する何かをしてgithubにpushすること&lt;/li&gt;
&lt;li&gt;一人だとだんだん寂しくなってきたので，一緒にやってくれる人募集中&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;クソアプリチャレンジは12月3日？ぐらいから初めていて当分続ける予定なので，もうちょいやったら適当にまとめるつもり．&lt;/p&gt;

&lt;h2 id=&#34;次&#34;&gt;次&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;クソアプリチャレンジを続ける&lt;/li&gt;
&lt;li&gt;MVP・MVVM周りを調べる&lt;/li&gt;
&lt;li&gt;RxJavaを調べる&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>github pageを独自ドメインで見れるようにした</title>
      <link>http://shogo-ma.github.io/post/my-domain/</link>
      <pubDate>Sun, 27 Nov 2016 21:19:49 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/my-domain/</guid>
      <description>

&lt;p&gt;ついにうちに机とイスがやってきたので，これからは色々作業できそう．たぶん．&lt;/p&gt;

&lt;p&gt;ここ最近，びっくりするぐらい休日に自宅でPCを触っていなかったのだけど，たまたま休日に作業する日があったので，その場のノリでgithub pageを独自ドメインで見れるようにしてみた．&lt;/p&gt;

&lt;p&gt;やり方はとても簡単．&lt;/p&gt;

&lt;p&gt;自身のgithub pageのリポジトリにCNAMEというファイル名で独自ドメインのurlを乗っけるだけ．&lt;/p&gt;

&lt;p&gt;自分の場合はCNAMEというファイルを作って以下の内容で書き込んだだけ．&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# CNAME
asahima.tech
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは時間がたてば自然に見れるようになる．&lt;/p&gt;

&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;特に理由もなくgithub pageを独自ドメインで見れるようにしてみた．せっかく独自ドメインで見れるようにしたので，もうちょい勉強ログを載せられたらと思う．input自体はかなり増えてるので（毎朝二時間ぐらいは技術書読み漁ってる），その辺をまとめていきたい．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>作業できない</title>
      <link>http://shogo-ma.github.io/post/201607-summary/</link>
      <pubDate>Sun, 14 Aug 2016 15:13:12 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/201607-summary/</guid>
      <description>

&lt;h2 id=&#34;7月&#34;&gt;7月&lt;/h2&gt;

&lt;p&gt;やっと身の回りが落ち着いたので先月のまとめを書く．7月は大きくやることが変わってしまったこととあまり健康ではなかった．おかげで自分の作業ができていない．社会人になってすぐ体調を崩すようになってしまってあまり良くない．健康面をどうにかして改善していきたい．&lt;/p&gt;

&lt;h2 id=&#34;自宅の作業環境&#34;&gt;自宅の作業環境&lt;/h2&gt;

&lt;p&gt;まったくもって自宅の作業環境が整っていない．そもそも作業用の机すらないので，作業をしようと思うと足にPCを載せて作業する必要があって効率が非常に悪い．良い感じの作業机が欲しい．あとイスも．&lt;/p&gt;

&lt;h2 id=&#34;今後&#34;&gt;今後&lt;/h2&gt;

&lt;p&gt;先月にまったく趣味の進捗がなかったので，今月こそはガッツリ趣味の作業をしたいと思う．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>そろそろなんかしないといけないかな</title>
      <link>http://shogo-ma.github.io/post/201606-summary/</link>
      <pubDate>Sat, 25 Jun 2016 09:41:43 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/201606-summary/</guid>
      <description>

&lt;p&gt;社会人になって早三ヶ月．会社の雰囲気になれるので手一杯で開発みたいなことは全くしていなかったので，何か作ろうかなと思っている．まぁ特に案はないのだけど．．．
加えて，自身の趣味の進捗管理的な意味で記録を書いていきたい．&lt;/p&gt;

&lt;p&gt;今興味があるのは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Androidアプリ開発&lt;/li&gt;
&lt;li&gt;iOSアプリ開発&lt;/li&gt;
&lt;li&gt;GoLang&lt;/li&gt;
&lt;li&gt;vimのプラグイン開発&lt;/li&gt;
&lt;li&gt;ソフトウェア工学

&lt;ul&gt;
&lt;li&gt;ソースコードの定量評価&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の4つ．&lt;/p&gt;

&lt;p&gt;この中だとAndroidアプリ開発が遊びやすそうなので，当面はAndroidアプリを作って遊ぼうかなー．最近はKotlinも出てきてるので，ついでに遊べればと思う．&lt;/p&gt;

&lt;h2 id=&#34;来月の目標&#34;&gt;来月の目標&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Androidアプリの本を読む&lt;/li&gt;
&lt;li&gt;俺の日常を改善する系のアプリを考える&lt;/li&gt;
&lt;li&gt;kotlinに慣れる&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>自分用Vimメモ</title>
      <link>http://shogo-ma.github.io/post/vim-memo/</link>
      <pubDate>Sun, 05 Jun 2016 01:21:00 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/vim-memo/</guid>
      <description>

&lt;h2 id=&#34;キーマップ&#34;&gt;キーマップ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;全てでマップ

&lt;ul&gt;
&lt;li&gt;map(再割り当てあり), noremap(再割り当てなし)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;insert modeでマップ

&lt;ul&gt;
&lt;li&gt;imap(再割り当てあり), inoremap(再割り当てなし)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;visual modeでマップ

&lt;ul&gt;
&lt;li&gt;vmap(再割り当てあり), vnoremap(再割り当てなし)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;command modeでマップ

&lt;ul&gt;
&lt;li&gt;cmap(再割り当てあり), cnoremap(再割り当てなし)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;normal modeでマップ

&lt;ul&gt;
&lt;li&gt;nmap(再割り当てあり), nnoremap(再割り当てなし)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;スコープ&#34;&gt;スコープ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ローカルスコープ

&lt;ul&gt;
&lt;li&gt;l:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;グローバルスコープ

&lt;ul&gt;
&lt;li&gt;g:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スクリプトスコープ

&lt;ul&gt;
&lt;li&gt;s:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;プラグイン作り&#34;&gt;プラグイン作り&lt;/h2&gt;

&lt;h3 id=&#34;pluginとautoloadの違い&#34;&gt;pluginとautoloadの違い&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pluginは実際にプラグインを使う上での必要最低限のものを記述したvimファイルを配置しておく&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;commandなど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;autoloadはpluginには置けないような重たい処理を記述したvimファイルを配置する&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;autocmd

&lt;ul&gt;
&lt;li&gt;バッファが作成された時のイベント処理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>kotlin入門: android studioでkotlinを使う</title>
      <link>http://shogo-ma.github.io/post/kotlin-first/</link>
      <pubDate>Sat, 14 May 2016 00:03:52 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/kotlin-first/</guid>
      <description>

&lt;p&gt;androidのアプリ開発でkotlinが話題らしいので，触ってみることにした．
アプリ開発はあまり経験がないが，この際新しくて面白そうということで色々挑戦してみる．&lt;/p&gt;

&lt;p&gt;今回はandroid studioでkotlinのソースコードを実行するまでをやってみる．&lt;/p&gt;

&lt;p&gt;流れとしては以下のような感じ．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;android studioにkotlin pluginを導入&lt;/li&gt;
&lt;li&gt;作成したプロジェクトのjavaのソースコードをkotlinに変換する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;android-studioにkotlin-pluginを導入&#34;&gt;android studioにkotlin pluginを導入&lt;/h2&gt;

&lt;p&gt;手順は簡単．
- android studioのメニューバーでpreference &amp;gt; Pluginsを選ぶ．
- PluginsのInstall JetBrains pluginを選ぶ
- kotlinで検索してKotlin pluginをインストール&lt;/p&gt;

&lt;p&gt;で終わり．&lt;/p&gt;

&lt;h2 id=&#34;作成したプロジェクトのjavaのソースコードをkotlinに変換する&#34;&gt;作成したプロジェクトのjavaのソースコードをkotlinに変換する&lt;/h2&gt;

&lt;p&gt;こちらはもっと簡単．
- android studioのメニューバーでCode &amp;gt; Convert Java File to Kotlin Fileを選択する．&lt;/p&gt;

&lt;p&gt;で，元の.javaのファイルが.ktのファイルに変換されます．
後は実行するだけ．場合（自分でもよく分かってない）によっては，オプショナル関連で落ちることがあるけど，それは単純に?をつければいいだけ．&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;一応サンプルがbuildできるようになったので，実際になんか作ってみようと思う．
あと，適当に調べながらやるつもりなので，適宜このメモ帳を更新していく．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>louvain法を実装してみた</title>
      <link>http://shogo-ma.github.io/post/louvain/</link>
      <pubDate>Mon, 23 Nov 2015 02:35:36 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/louvain/</guid>
      <description>&lt;p&gt;最近，コミュニティ抽出について色々調べていて，そのベースライン的な立ち位置な論文があったので実装してみたという話&lt;/p&gt;

&lt;p&gt;論文は以下のとおり.
&lt;a href=&#34;http://arxiv.org/abs/0803.0476&#34;&gt;Fast unfolding of communities in large networks&lt;/a&gt;. Vincent D. Blondel, Jean-Loup Guillaume, Renaud Lambiotte, Etienne Lefebvre.)]&lt;/p&gt;

&lt;p&gt;概要を簡単に説明すると，コミュニティ抽出には基本的な手法としてNewman法と呼ばれる手法がある，この手法は貪欲的にクラスタリングを行っていく手法で，全ノードに対して最も評価値が高くなるようなノード同士をmergeするという方法になっている．そのためノード対を探索する際の計算時間が非常にかかるという欠点がある．そこで，Louvain法では，全ノードではなく，対象としている周辺ノードのみを探索し，最も評価が高くなるノードをmergeするという方法を取ることで高速化を実現した．という話.&lt;/p&gt;

&lt;p&gt;実装したコードは&lt;a href=&#34;https://github.com/shogo-ma/louvain-python&#34;&gt;ここ&lt;/a&gt;においてあります．入力のgraphはpythonのgraphライブラリのnetworkxのGraphを使います．基本的に重み付き無向グラフのみしか使えません．一応それっぽく動いていると思います．&lt;/p&gt;

&lt;p&gt;次はコミュニティ抽出の基本についてまとめましょうかね．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>kaggleデビューしてみた</title>
      <link>http://shogo-ma.github.io/post/kaggle-debut/</link>
      <pubDate>Tue, 20 Oct 2015 03:06:07 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/kaggle-debut/</guid>
      <description>&lt;p&gt;暇にあかして最近流行りのkaggleデビューしてみた。&lt;/p&gt;

&lt;p&gt;kaggleはデータサイエンスに関するコンテストらしく、そこそこお手軽なようなので試しにやってみることに。
以下のスライドで説明されているコンペのなかで、一番楽しそうだったという理由もあるが。。。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/50rIBQnbqfnCJE&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/cocodrips/pyconjp&#34; title=&#34;強くなるためのプログラミング -プログラミングに関する様々なコンテストとそのはじめ方-#pyconjp&#34; target=&#34;_blank&#34;&gt;強くなるためのプログラミング -プログラミングに関する様々なコンテストとそのはじめ方-#pyconjp&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/cocodrips&#34; target=&#34;_blank&#34;&gt;cocodrips&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;とりあえず今回はkaggleのGetting Startedにあるタイタニックのデータを使うものに参加してみた。これは与えられたデータから生存する人間を当てるというものになっている。&lt;/p&gt;

&lt;p&gt;今回は試しということもあって、男性であれば全て生き残るという形で出力してみた。&lt;/p&gt;

&lt;p&gt;結果はこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shogo-ma.github.io/images/kaggle_debut.png&#34; alt=&#34;kaggle debut&#34; /&gt;&lt;/p&gt;

&lt;p&gt;結果はどうあれkaggleデビューすることができた。今回はkaggleへのデビューだったが、今後は上記のスライドで紹介されている他のコンテストにも参加したい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pythonで編集中のライブラリを読み込む</title>
      <link>http://shogo-ma.github.io/post/editable/</link>
      <pubDate>Tue, 20 Oct 2015 01:42:00 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/editable/</guid>
      <description>&lt;p&gt;研究のために自分でライブラリを書くのは面倒くさいので、ある程度まで書かれてるライブラリの中身をいじるってことをよくやる。
そうすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install .
pip uninstall &amp;quot;ライブラリ名&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいなことを何度もやるはめになる。とても面倒くさい。&lt;/p&gt;

&lt;p&gt;そんななかで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --editable .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形でinstallすると、ライブラリを編集中の状態でもそのまま使える。面倒くさいことしなくていいので幸せ。
細かいことは&lt;a href=&#34;http://pip.readthedocs.org/en/stable/reference/pip_install/#editable-installs&#34;&gt;公式のdocument&lt;/a&gt;に書いてあるので読むと幸せになれるかもしれない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://shogo-ma.github.io/about/</link>
      <pubDate>Tue, 20 Oct 2015 01:41:36 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/about/</guid>
      <description>

&lt;h3 id=&#34;interests&#34;&gt;Interests&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Programming (Python, Golang, Kotlin)&lt;/li&gt;
&lt;li&gt;Natural Language Processing&lt;/li&gt;
&lt;li&gt;Sake&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;contacts&#34;&gt;Contacts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://asahima.tech&#34;&gt;Github: shogo-ma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>pyenvを使っての環境構築</title>
      <link>http://shogo-ma.github.io/post/pyenv-manual/</link>
      <pubDate>Mon, 27 Jul 2015 01:19:31 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/pyenv-manual/</guid>
      <description>

&lt;p&gt;探せばpyenvの使い方的なものは色々溢れてるけど、色々分散していたので個人的なまとめを作る。流れとしては以下の様な感じ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手順

&lt;ol&gt;
&lt;li&gt;pyenvとpluginをinstall&lt;/li&gt;
&lt;li&gt;pyenvを使ってpythonをinstall&lt;/li&gt;
&lt;li&gt;virtualenvを使って環境を構築&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pyenvとpluginをinstall&#34;&gt;pyenvとpluginをinstall&lt;/h2&gt;

&lt;p&gt;今回、想定している状況が「apt-getを使う権限がないユーザが異なるpythonをinstallしたい」という感じ。なのでgithubからcloneしてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に今回使うpluginをinstall。使いたいのはpyenv-pip-refleshとpyenv-virtualenvの２つ。&lt;/p&gt;

&lt;p&gt;pyenv-pip-refleshはpyenvでpythonのversionを切り替えた時に、pyenv rehashというコマンドを使う必要があるのだけど、それをしないで済むplugin。pyenv-virtualenvはpythonの仮想環境を作るpluginになっている。&lt;/p&gt;

&lt;p&gt;それぞれ~/.pyenv/pluginsの中にcloneすればinstallが終わり&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.pyenv/plugins
git clone https://github.com/yyuu/pyenv-pip-rehash.git
git clone git://github.com/yyuu/pyenv-virtualenv.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次は~/.bashrcにpyenvのpathを書く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;
if [ -d &amp;quot;$PYENV_ROOT&amp;quot; ]; then
    export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;
    eval &amp;quot;$(pyenv init -)&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでいいなんて、すばらしい。&lt;/p&gt;

&lt;h2 id=&#34;pyenvを使ってpythonをinstall&#34;&gt;pyenvを使ってpythonをinstall&lt;/h2&gt;

&lt;p&gt;pyenvで自分の欲しいpythonのversionをinstallする。pyenvでinstallできるversionは以下で確認可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv install -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回欲しいversionは2.7系なので、それの中からてきとうなやつをinstallする。下のコマンドを入力して少しすると2.7.10がinstallできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv install 2.7.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;virtualenvを使って環境を構築&#34;&gt;virtualenvを使って環境を構築&lt;/h2&gt;

&lt;p&gt;使う環境を分けたいので、virtualenvを使って、別で新しく環境を作る。以下のコマンドで仮想環境を作成できる。virtualenv-nameには自分で適当な名前を入れるといい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv virtualenv 2.7.10 virtualenv-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した環境を使う場合には以下のコマンド。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv activate virtualenv-name // 環境を使う時
pyenv deactivate // 環境から抜けたいとき
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;activateすると以下のように言われるので、言われるままに追加すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Load pyenv-virtualenv automatically by adding
# the following to ~/.bash_profile:

eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自分の場合だと、~/.bashrcに追加したので以下のような感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した環境ごとにpipを使えるので、あとは欲しいライブラリなどを適当にinstallすれば終わり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hugoを使ってみる</title>
      <link>http://shogo-ma.github.io/post/hugo/</link>
      <pubDate>Sun, 26 Jul 2015 21:00:33 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/hugo/</guid>
      <description>

&lt;p&gt;自分のログをはてなブログやらevernoteで取ってたけど、気変わりしてhugoを使ってみる。案外詰まったので、作業手順を載せる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手順

&lt;ol&gt;
&lt;li&gt;hugoをinstall&lt;/li&gt;
&lt;li&gt;themeを選ぶ&lt;/li&gt;
&lt;li&gt;postするページを作る&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hugoをinstall&#34;&gt;hugoをinstall&lt;/h2&gt;

&lt;p&gt;hugoをインストールするだけならhomebrewを使うだけで十分。以下のコマンドを入力。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hugoで管理するディレクトリは以下のコマンドで生成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site &amp;quot;directory-name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時に生成されるディレクトリ内のpublicディレクトリを公開すればページを表示することができる。&lt;/p&gt;

&lt;h2 id=&#34;themeを選ぶ&#34;&gt;themeを選ぶ&lt;/h2&gt;

&lt;p&gt;hugoを使う上でのthemeを選択。githubにHugoThemesと公開されているので、そこから選択して使うといい。私は選ぶのが面倒くさかったのでとりあえず全部落として見て試してみる方針。以下のコマンドでは、hugoThemesにあるものをhugoで管理するディレクトリ内にthemesという名前で落としてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはここから落としてきたテーマから自分のお好みのものを選択するだけ&lt;/p&gt;

&lt;h2 id=&#34;postするページを作る&#34;&gt;postするページを作る&lt;/h2&gt;

&lt;p&gt;とっても簡単。ページのテンプレートを作るには以下のコマンドを使用する。以下で生成されたmarkdownのファイルに対して、記事を書いていくという流れになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/&amp;quot;name&amp;quot;.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ページの生成は以下でできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t theme-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカルでpreviewしたい場合は以下のコマンド。入力後にlocalhost:1313を開けばどうなっているかを見れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -t theme-name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;push&#34;&gt;push&lt;/h2&gt;

&lt;p&gt;hugoで作ったページはpublicディレクトリの中にあるので、それを丸ごと公開する場においてあげれば終わり。私の場合だとpublicディレクトリをgithubに作ったgithub pagesのリポジトリに突っ込めば見れる。&lt;/p&gt;

&lt;p&gt;他に細かい設定はあるけど、一応はこれで公開までは持っていける。残りやるとすれば&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default.mdを作る&lt;/li&gt;
&lt;li&gt;config.tomlのbaseurlを公開するurlに変更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ぐらい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golangでmap同士を比較する</title>
      <link>http://shogo-ma.github.io/post/deepequal/</link>
      <pubDate>Sun, 26 Jul 2015 03:56:32 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/deepequal/</guid>
      <description>&lt;p&gt;golangでmapを比較するときにどうしたらいいかと思って調べてみると思いの外簡単だった&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
import &amp;quot;reflect&amp;quot;

x := map[string]bool{&amp;quot;a&amp;quot; : true, &amp;quot;b&amp;quot; : true}
y := map[string]bool{&amp;quot;a&amp;quot; : true, &amp;quot;c&amp;quot; : true}
z := map[string]bool{&amp;quot;a&amp;quot; : true, &amp;quot;b&amp;quot; : true}

reflect.DeepEqual(x, y) // false
reflect.DeepEqual(x, z) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reflectって便利&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golangでmapに要素があるかを調べる</title>
      <link>http://shogo-ma.github.io/post/exist/</link>
      <pubDate>Fri, 24 Jul 2015 04:23:33 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/exist/</guid>
      <description>&lt;p&gt;使う割によく忘れるのでメモ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;dict := map[string]int{&amp;quot;a&amp;quot;: 0}

if _, ok := dict[&amp;quot;a&amp;quot;]; !ok {
    // 要素が無いとき
} else {
    // 要素があるとき
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>