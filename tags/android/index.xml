<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>log</title>
    <link>http://shogo-ma.github.io/tags/android/index.xml</link>
    <description>Recent content on log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by shogo-ma</copyright>
    <atom:link href="http://shogo-ma.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AndroidでのPullToRefreshの実装</title>
      <link>http://shogo-ma.github.io/post/pulltorefresh/</link>
      <pubDate>Fri, 16 Dec 2016 23:38:27 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/pulltorefresh/</guid>
      <description>

&lt;p&gt;練習がてらに適当なAPIを叩いて取得した結果のリストをRecyclerViewで表示するみたいなことをしているのだけど，ただ使っているだけではなんともそれっぽくない感じだったので追加機能としてPullToRefreshを試しに実装してみた．&lt;/p&gt;

&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;

&lt;p&gt;自分の環境をざっくり書く．そこまで気にしなくていい．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Android Studio 2.2.3&lt;/li&gt;
&lt;li&gt;zenfone3 (Android 6.0)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;やり方&#34;&gt;やり方&lt;/h2&gt;

&lt;p&gt;使ったのはSwipeRefreshLayouというやつで．Support Libraryのv4から入ったViewGroupになる．公式のdocumentを読む限りでは，縦方向のジェスチャーによってViewの内容をRefreshすることができるものらしい．まんまPullToRefreshっすね．&lt;/p&gt;

&lt;p&gt;使い方とっても簡単，対象のViewをSwipeRefreshLayoutの子要素にして，ソースでonRefreshListenerを実装するだけ．&lt;/p&gt;

&lt;p&gt;まず，対象のViewをSwipeRefreshLayoutの子要素にする．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;android.support.v4.widget.SwipeRefreshLayout
	android:id=&amp;quot;@+id/swipeRefreshLayout&amp;quot;
	android:layout_width=&amp;quot;match_parent&amp;quot;
	android:layout_height=&amp;quot;match_parent&amp;quot; &amp;gt;

	&amp;lt;android.support.v7.widget.RecyclerView
		android:id=&amp;quot;@+id/recyclerView&amp;quot;
		android:layout_width=&amp;quot;match_parent&amp;quot;
		android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;
&amp;lt;/android.support.v4.widget.SwipeRefreshLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にソース側でonRefreshListenerを実装する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class MainActivity : SwipeRefreshLayout.onRefreshListener {
	val swipeRefreshLayout: SwipeRefreshLayout by lazy {
		findViewById(R.id.swipeRefreshLayout) as SwipeRefreshLayout
	}

	override fun onCreate(savedInstance: Bundle?) {
		super.onCreate(savedInstanceState)
		setContentView(R.layout.activity_main)

		swipeRefreshLayout.setOnRefreshListener(this)
	}

	override onRefresh() {
		// ここにPullToRefresh時の実装を書く
		swipeRefreshLayout.isRefresing = false //progress barを消す
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえずこれだけでPullToRefreshっぽい挙動はする．ただ，何の実装もしないで動かすとすぐprogress barが消えちゃうので，時間調整とかはしたほうが良いかもしれない．&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;予想外に簡単に実装できてびっくりした．単純にPullToRefreshができるようになるだけでもかなりそれっぽいアプリになるなーという感じ．次は，RecyclerViewでスクロール時のloadingを試してみたいなーと考えている．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>kotlin入門: android studioでkotlinを使う</title>
      <link>http://shogo-ma.github.io/post/kotlin-first/</link>
      <pubDate>Sat, 14 May 2016 00:03:52 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/kotlin-first/</guid>
      <description>

&lt;p&gt;androidのアプリ開発でkotlinが話題らしいので，触ってみることにした．
アプリ開発はあまり経験がないが，この際新しくて面白そうということで色々挑戦してみる．&lt;/p&gt;

&lt;p&gt;今回はandroid studioでkotlinのソースコードを実行するまでをやってみる．&lt;/p&gt;

&lt;p&gt;流れとしては以下のような感じ．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;android studioにkotlin pluginを導入&lt;/li&gt;
&lt;li&gt;作成したプロジェクトのjavaのソースコードをkotlinに変換する&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;android-studioにkotlin-pluginを導入&#34;&gt;android studioにkotlin pluginを導入&lt;/h2&gt;

&lt;p&gt;手順は簡単．
- android studioのメニューバーでpreference &amp;gt; Pluginsを選ぶ．
- PluginsのInstall JetBrains pluginを選ぶ
- kotlinで検索してKotlin pluginをインストール&lt;/p&gt;

&lt;p&gt;で終わり．&lt;/p&gt;

&lt;h2 id=&#34;作成したプロジェクトのjavaのソースコードをkotlinに変換する&#34;&gt;作成したプロジェクトのjavaのソースコードをkotlinに変換する&lt;/h2&gt;

&lt;p&gt;こちらはもっと簡単．
- android studioのメニューバーでCode &amp;gt; Convert Java File to Kotlin Fileを選択する．&lt;/p&gt;

&lt;p&gt;で，元の.javaのファイルが.ktのファイルに変換されます．
後は実行するだけ．場合（自分でもよく分かってない）によっては，オプショナル関連で落ちることがあるけど，それは単純に?をつければいいだけ．&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;一応サンプルがbuildできるようになったので，実際になんか作ってみようと思う．
あと，適当に調べながらやるつもりなので，適宜このメモ帳を更新していく．&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>