<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>log</title>
    <link>http://shogo-ma.github.io/tags/python/index.xml</link>
    <description>Recent content on log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by shogo-ma</copyright>
    <atom:link href="http://shogo-ma.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>louvain法を実装してみた</title>
      <link>http://shogo-ma.github.io/post/louvain/</link>
      <pubDate>Mon, 23 Nov 2015 02:35:36 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/louvain/</guid>
      <description>&lt;p&gt;最近，コミュニティ抽出について色々調べていて，そのベースライン的な立ち位置な論文があったので実装してみたという話&lt;/p&gt;

&lt;p&gt;論文は以下のとおり.
&lt;a href=&#34;http://arxiv.org/abs/0803.0476&#34;&gt;Fast unfolding of communities in large networks&lt;/a&gt;. Vincent D. Blondel, Jean-Loup Guillaume, Renaud Lambiotte, Etienne Lefebvre.)]&lt;/p&gt;

&lt;p&gt;概要を簡単に説明すると，コミュニティ抽出には基本的な手法としてNewman法と呼ばれる手法がある，この手法は貪欲的にクラスタリングを行っていく手法で，全ノードに対して最も評価値が高くなるようなノード同士をmergeするという方法になっている．そのためノード対を探索する際の計算時間が非常にかかるという欠点がある．そこで，Louvain法では，全ノードではなく，対象としている周辺ノードのみを探索し，最も評価が高くなるノードをmergeするという方法を取ることで高速化を実現した．という話.&lt;/p&gt;

&lt;p&gt;実装したコードは&lt;a href=&#34;https://github.com/shogo-ma/louvain-python&#34;&gt;ここ&lt;/a&gt;においてあります．入力のgraphはpythonのgraphライブラリのnetworkxのGraphを使います．基本的に重み付き無向グラフのみしか使えません．一応それっぽく動いていると思います．&lt;/p&gt;

&lt;p&gt;次はコミュニティ抽出の基本についてまとめましょうかね．&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pythonで編集中のライブラリを読み込む</title>
      <link>http://shogo-ma.github.io/post/editable/</link>
      <pubDate>Tue, 20 Oct 2015 01:42:00 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/editable/</guid>
      <description>&lt;p&gt;研究のために自分でライブラリを書くのは面倒くさいので、ある程度まで書かれてるライブラリの中身をいじるってことをよくやる。
そうすると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install .
pip uninstall &amp;quot;ライブラリ名&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいなことを何度もやるはめになる。とても面倒くさい。&lt;/p&gt;

&lt;p&gt;そんななかで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --editable .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形でinstallすると、ライブラリを編集中の状態でもそのまま使える。面倒くさいことしなくていいので幸せ。
細かいことは&lt;a href=&#34;http://pip.readthedocs.org/en/stable/reference/pip_install/#editable-installs&#34;&gt;公式のdocument&lt;/a&gt;に書いてあるので読むと幸せになれるかもしれない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pyenvを使っての環境構築</title>
      <link>http://shogo-ma.github.io/post/pyenv-manual/</link>
      <pubDate>Mon, 27 Jul 2015 01:19:31 +0900</pubDate>
      
      <guid>http://shogo-ma.github.io/post/pyenv-manual/</guid>
      <description>

&lt;p&gt;探せばpyenvの使い方的なものは色々溢れてるけど、色々分散していたので個人的なまとめを作る。流れとしては以下の様な感じ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手順

&lt;ol&gt;
&lt;li&gt;pyenvとpluginをinstall&lt;/li&gt;
&lt;li&gt;pyenvを使ってpythonをinstall&lt;/li&gt;
&lt;li&gt;virtualenvを使って環境を構築&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pyenvとpluginをinstall&#34;&gt;pyenvとpluginをinstall&lt;/h2&gt;

&lt;p&gt;今回、想定している状況が「apt-getを使う権限がないユーザが異なるpythonをinstallしたい」という感じ。なのでgithubからcloneしてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に今回使うpluginをinstall。使いたいのはpyenv-pip-refleshとpyenv-virtualenvの２つ。&lt;/p&gt;

&lt;p&gt;pyenv-pip-refleshはpyenvでpythonのversionを切り替えた時に、pyenv rehashというコマンドを使う必要があるのだけど、それをしないで済むplugin。pyenv-virtualenvはpythonの仮想環境を作るpluginになっている。&lt;/p&gt;

&lt;p&gt;それぞれ~/.pyenv/pluginsの中にcloneすればinstallが終わり&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.pyenv/plugins
git clone https://github.com/yyuu/pyenv-pip-rehash.git
git clone git://github.com/yyuu/pyenv-virtualenv.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次は~/.bashrcにpyenvのpathを書く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;
if [ -d &amp;quot;$PYENV_ROOT&amp;quot; ]; then
    export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;
    eval &amp;quot;$(pyenv init -)&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでいいなんて、すばらしい。&lt;/p&gt;

&lt;h2 id=&#34;pyenvを使ってpythonをinstall&#34;&gt;pyenvを使ってpythonをinstall&lt;/h2&gt;

&lt;p&gt;pyenvで自分の欲しいpythonのversionをinstallする。pyenvでinstallできるversionは以下で確認可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv install -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回欲しいversionは2.7系なので、それの中からてきとうなやつをinstallする。下のコマンドを入力して少しすると2.7.10がinstallできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv install 2.7.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;virtualenvを使って環境を構築&#34;&gt;virtualenvを使って環境を構築&lt;/h2&gt;

&lt;p&gt;使う環境を分けたいので、virtualenvを使って、別で新しく環境を作る。以下のコマンドで仮想環境を作成できる。virtualenv-nameには自分で適当な名前を入れるといい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv virtualenv 2.7.10 virtualenv-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した環境を使う場合には以下のコマンド。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pyenv activate virtualenv-name // 環境を使う時
pyenv deactivate // 環境から抜けたいとき
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;activateすると以下のように言われるので、言われるままに追加すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Load pyenv-virtualenv automatically by adding
# the following to ~/.bash_profile:

eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自分の場合だと、~/.bashrcに追加したので以下のような感じ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成した環境ごとにpipを使えるので、あとは欲しいライブラリなどを適当にinstallすれば終わり。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>